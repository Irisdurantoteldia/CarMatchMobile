rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Permet als usuaris llegir i escriure només les seves pròpies dades
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    // Permet als usuaris autenticats crear i llegir els seus horaris
    match /weeklySchedule/{scheduleId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // Qualsevol usuari pot crear swipes, però no modificar ni eliminar
    match /swipes/{swipesId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
    }
    
    // Matches collection - allow users to read/write matches they're part of
    match /matches/{matchId} {
      // Allow reading matches where the user is a participant
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.matchedUserId == request.auth.uid
      );
      
      // Allow creating matches (with validation)
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.matchedUserId == request.auth.uid
      );
      
      // Allow updating matches (with validation)
      allow update: if isAuthenticated() && 
                     request.auth.uid in resource.data.users &&
                     request.auth.uid in request.resource.data.users;
      
      // Messages subcollection - allow participants to read/write
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
                     request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.users;
        
        allow create: if isAuthenticated() && 
                       request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.users &&
                       request.resource.data.sender == request.auth.uid;
      }
    }

    // Likes collection
    match /likes/{likeId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.likedUserId == request.auth.uid
      );
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Reglas para dailyOverride
    match /dailyOverride/{overrideId} {
      allow read: if isAuthenticated() && (
        resource.data.driverId == request.auth.uid ||
        request.auth.uid in resource.data.notificationUsers
      );
      allow create: if isAuthenticated() && 
        request.resource.data.driverId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.driverId == request.auth.uid;
    }

    // Routes collection
    match /routes/{routeId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Vehicles collection
    match /vehicles/{vehicleId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
} 